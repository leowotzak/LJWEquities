import logging
from abc import ABC, abstractmethod

from ljwtrader.events import Event

logger = logging.getLogger(__name__)


class Brokerage(ABC):
    """
    Base class that serves to represent any brokerage, real or fake, that the system
    is able to transact through. Brokerages need to handle commission, fee, and slippage
    calculations and generate FillOrders that contain these calculations 
    """
    def generate_fill_order(self, event: Event) -> Event:
        """Takes an OrderEvent and creates a FillEvent from its details

        Args:
            event (Event): OrderEvent containing the details of the trade

        Returns:
            Event: FillEvent containing the executed order with fees, commission, and slippage
        """
        raise NotImplementedError(
            f"{self.__class__} must have a generate_fill_order() method")

    def calculate_slippage(self, order_event: Event,
                           fill_event: Event) -> float:
        """Compares an OrderEvent and a FillEvent and compares the prices to determine slippage

        Args:
            order_event (Event): Original order generated by the trading TradingSystem, theoretical
            fill_event (Event): Actual order executed by the broker, actual

        Returns:
            float: Slippage amount
        """
        raise NotImplementedError(
            f"{self.__class__} must have a calculate_slippage() method")

    def calculate_commission(self, order_event: Event) -> float:
        """Takes an OrderEvent and calculates the proper fees & commission

        Args:
            order_event (Event): OrderEvent containing the desired price and quantity

        Returns:
            float: Sum of total fees and total commissions
        """
        raise NotImplementedError(
            f"{self.__class__} must have a calculate_commission() method")
